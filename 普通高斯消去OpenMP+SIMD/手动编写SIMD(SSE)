#include<iostream>
#include<omp.h>
#include<xmmintrin.h>
#include<sys/time.h>
using namespace std;
const int N=5000;
float m[N][N];
const int NUM_THREADS=6;
void m_reset()
{

        for(int i=0;i<N;i++)
        {

                for(int j=0;j<i;j++)
                        m[i][j]=0;
                m[i][i]=1.0;
                for(int j=i+1;j<N;j++)                                                                                                                  
			m[i][j]=rand()%100;
        }
        for(int k=0;k<N;k++)
                for(int i=k+1;i<N;i++)
                        for(int j=0;j<N;j++)
                                m[i][j]+=m[k][j];
}

void func(){

        int i,j,k;
        float tmp;
        bool parallel=true;
	#pragma omp parallel if(parallel), num_threads(NUM_THREADS), private(i, j, k, tmp)
        for(k = 0; k < N; ++k){
#pragma omp single
                {
 			tmp = m[k][k];
                       	 __m128 vt= _mm_set1_ps(m[k][k]);
               		for( j=k+1;j+4<=N;j+=4)
               		 {
                       		__m128 va=_mm_loadu_ps(&m[k][j]);
                        	va= _mm_div_ps(va,vt);
                        	_mm_storeu_ps(&m[k][j],va);                                                                         
                	}
                	for(;j<N;j++)
               		 {
    				m[k][j]=m[k][j]/tmp;
                	}
                	m[k][k]=1.0;
                }
#pragma omp for
                for(i = k + 1; i < N; ++i){
                        tmp = m[i][k];
                      __m128 vt= _mm_set1_ps(m[i][k]);
                        for(j=k+1;j+4<=N;j+=4)
                        {
                                __m128 vakj=_mm_loadu_ps(&m[k][j]);
                                __m128 vaij=_mm_loadu_ps(&m[i][j]);
                                __m128 vx=_mm_mul_ps(vakj,vt);
                                vaij=_mm_sub_ps(vaij,vx);
                                _mm_storeu_ps(&m[i][j],vaij);                                                                                                                                                                                  
			}
                        for(;j<N;j++)
                        {
                                m[i][j]=m[i][j]-m[k][j]*tmp;
                        }
                        m[i][k]=0;
                                }

        }
}
int main()
{
        m_reset();
	
        struct  timeval   tv_begin,tv_end;
        unsigned  long openmp_time;

        gettimeofday(&tv_begin,NULL);

        func();
       gettimeofday(&tv_end,NULL);
        openmp_time=1000000 * (tv_end.tv_sec-tv_begin.tv_sec)+ tv_end.tv_usec-tv_begin.tv_usec;
        cout<<"openmp_time:"<<openmp_time<<endl;
    
}
